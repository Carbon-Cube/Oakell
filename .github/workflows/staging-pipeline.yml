name: Staging CI/CD Pipeline

on:
  push:
    branches: [ develop ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'
    - name: Restore dependencies
      run: dotnet restore ./aspnet-core/
      
    - name: Build
      run: dotnet build ./aspnet-core/ --no-restore --configuration Release

  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY}}
        ECR_REPOSITORY: 'oakell-staging'
        IMAGE_TAG: 'latest'
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f aspnet-core/Dockerfile aspnet-core
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set up Kubeconfig
      run: |
        aws eks --region af-south-1 update-kubeconfig --name oakell

    - name: Create or Replace Database Secret  
      run: |
        echo ${{ secrets.STAGING_CONNECTION_STRING }} 
        if kubectl get secret my-db-secret --namespace oakell-staging; then
          kubectl delete secret my-db-secret --namespace oakell-staging
        fi
          kubectl create secret generic my-db-secret \
            --from-literal=connectionstring=${{ secrets.STAGING_CONNECTION_STRING }}  \
            --namespace oakell-staging \
            --dry-run=client -o yaml | kubectl apply -f -
      env:
        AWS_DEFAULT_REGION: af-south-1
        AWS_REGION: af-south-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Create ECR Secret for Kubernetes
      run: |
        if kubectl get secret ecr-secret --namespace oakell-staging; then
          kubectl delete secret ecr-secret --namespace oakell-staging
        fi
        kubectl create secret docker-registry ecr-secret \
          --docker-server=${{ secrets.ECR_REGISTRY}} \
          --docker-username=AWS \
          --namespace oakell-staging \
          --docker-password=${{ secrets.ECR_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
      env:
        AWS_DEFAULT_REGION: af-south-1
        AWS_REGION: af-south-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/staging-deployment.yml --namespace oakell-staging
    
    - name: Force Rollout Restart
      run: |
        kubectl rollout restart deployment/oakell-staging-be
      env:
        AWS_DEFAULT_REGION: af-south-1
        AWS_REGION: af-south-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-frontend:
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '20'
    
    - name: Cache Yarn dependencies
      uses: actions/cache@v2
      with:
        path: angular/.yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install
      working-directory: ./angular

    - name: Build Angular Project
      run: yarn build --prod
      working-directory: ./angular
      
  deploy-frontend:
    needs: build-frontend
    environment: develop
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Deploy to Amazon S3 and Invalidate CloudFront
      run: |
        aws s3 sync angular s3://oakell-staging --delete
        aws cloudfront create-invalidation --distribution-id arn:aws:s3:::oakell-staging --paths "/*"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'af-south-1'
