name: Staging CI/CD Pipeline

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'
    - name: Restore dependencies
      run: dotnet restore ./aspnet-core/
      
    - name: Build
      run: dotnet build ./aspnet-core/ --no-restore --configuration Release

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: develop
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: '8.0'
  #     - name: Test
  #       run: dotnet test ./aspnet-core/ --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY}}
        ECR_REPOSITORY: 'oakell-staging'
        IMAGE_TAG: 'latest'
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f aspnet-core/Dockerfile aspnet-core
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set up Kubeconfig
      run: |
        aws eks --region af-south-1 update-kubeconfig --name oakell-staging

    - name: Create or Replace Database Secret
      run: |
        if kubectl get secret my-db-secret; then
          kubectl delete secret my-db-secret
        fi
          kubectl create secret generic my-db-secret \
            --from-literal=connectionstring=${{ secrets.STAGING_CONNECTION_STRING }} \
            --kubectl apply -f -
      env:
        AWS_DEFAULT_REGION: af-south-1
        AWS_REGION: af-south-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Create ECR Secret for Kubernetes
      run: |
        if kubectl get secret ecr-secret; then
          kubectl delete secret ecr-secret
        fi
          kubectl create secret docker-registry ecr-secret \
            --docker-server=${{ secrets.ECR_REGISTRY}} \
            --docker-username=AWS \
            --docker-password=${{ secrets.ECR_PASSWORD }} \
            --kubectl apply -f -
      env:
        AWS_DEFAULT_REGION: af-south-1
        AWS_REGION: af-south-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/staging-deployment.yml
